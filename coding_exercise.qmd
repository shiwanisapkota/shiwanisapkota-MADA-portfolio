---
title: "R Coding Exercise"
output:
  html_document:
    toc: FALSE
---

# Loading required packages

```{r}
# Loading dslabs and tidyverse packages
library("dslabs") 
library("tidyverse")
```

# Loading and checking gapminder data

```{r}
# Looking at help file for gapminder data
help(gapminder)
# Getting an overview of data structure
str(gapminder)
```

```{r}
# Getting summary of data from gapminder
summary(gapminder)
```

```{r}
# Determining the type of gapminder object
class(gapminder)
```

# Processing data

## Creating an object named 'africadata'

```{r}
# Creating an object africadata containing only the African countries
africadata <- gapminder %>% filter(continent == "Africa")

# Looking at the structure and summary of object (africadata)
str(africadata)
summary(africadata)
glimpse(africadata)
```

## Creating an object named 'infantmort_lifeexp'

```{r}
# Creating an object infantmort_lifeexp containing only infant_mortality and life_expectancy variables
infantmort_lifeexp <- africadata %>%
                      select(infant_mortality, life_expectancy)

# Looking at the structure and summary of object (infantmort_lifeexp)
str(infantmort_lifeexp)
summary(infantmort_lifeexp)
glimpse(infantmort_lifeexp)
```

## Creating an object named 'pop_lifeexp'

```{r}
# Creating an object pop_lifeexp containing only population and life_expectancy variables
pop_lifeexp <- africadata %>%
                      select(population, life_expectancy)

# Looking at the structure and summary of object (pop_lifeexp)
str(pop_lifeexp)
summary(pop_lifeexp)
glimpse(pop_lifeexp)
```

# Plotting

```{r}
# Plotting life expectancy as a function of infant mortality
ggplot(data = infantmort_lifeexp,
       (aes(x = infant_mortality, y = life_expectancy))) +
  theme_classic() +
  geom_point(size = 1.0) +
  labs(title = "Life expectancy as a function of infant mortality", 
       x = "Infant Mortality", y = "Life Expectancy (In Years)") +
  theme(axis.text = element_text(face = "bold"), plot.title =   element_text(hjust = 0.5, size = 14),
        axis.title = element_text(size = 14))
```

```{r}
# Plotting life expectancy as a function of population size
ggplot(data = pop_lifeexp,
       (aes(x = population, y = life_expectancy))) +
  theme_classic() +
  geom_point(size = 1.0) +
  scale_x_continuous(trans = 'log10') +
  labs(title = "Life expectancy as a function of population size", 
       x = "Population (In Logscale)", y = "Life Expectancy (In Years)") +
  theme(axis.text = element_text(face = "bold"), plot.title =   element_text(hjust = 0.5, size = 14),
        axis.title = element_text(size = 14))
```

# Checking data missingness

```{r}
# Looking at the years having missing data for infant mortality in africadata
infant_mortality_yrs <- africadata %>% 
                        filter(is.na(infant_mortality))
table(infant_mortality_yrs$year)
```

# Data processing using African countries data for the year 2000

```{r}
# Creating a new object named africadata_2000 by using only year 2000 data from africadata object
africadata_2000 <- africadata %>%
                   filter(year == 2000)
# Looking at the structure and summary of object (africadata_2000)
str(africadata_2000)
summary(africadata_2000)
glimpse(africadata_2000)
```

# Plotting using African countries data for the year 2000

## Plot 1

```{r}
# Plotting life expectancy as a function of infant mortality in the year 2000
ggplot(data = africadata_2000,
       (aes(x = infant_mortality, y = life_expectancy))) +
  theme_classic() +
  geom_point(size = 1.0) +
  labs(title = "Life expectancy as a function of infant mortality in the year 2000", 
       x = "Infant Mortality", y = "Life Expectancy (In Years)") +
  theme(axis.text = element_text(face = "bold"), plot.title = element_text(hjust = 0.5, size = 14),
        axis.title = element_text(size = 14))
```

## Plot 2

```{r}
# Plotting life expectancy as a function of population size in the year 2000
ggplot(data = africadata_2000,
       (aes(x = population, y = life_expectancy))) +
  theme_classic() +
  geom_point(size = 1.0) +
  scale_x_continuous(trans = 'log10') +
  labs(title = "Life expectancy as a function of population size in the year 2000", 
       x = "Population (In Logscale)", y = "Life Expectancy (In Years)") +
  theme(axis.text = element_text(face = "bold"), plot.title =   element_text(hjust = 0.5, size = 14),
        axis.title = element_text(size = 14))
```

# A simple fit using African countries data for the year 2000

```{r}
# Using lm function to fit linear regression model using life expectancy as the outcome and infant mortality as the predictor for the year 2000
fit1 <- lm(life_expectancy ~ infant_mortality, data = africadata_2000)
summary(fit1)

# Using lm function to fit linear regression model using life expectancy as the outcome and population size as the predictor for the year 2000
fit2 <- lm(life_expectancy ~ population, data = africadata_2000)
summary(fit2)
```

# Conclusion

**Based on the p-values for each fit, we found statistically significant negative correlation between infant mortality and life expectancy in the year 2000 (p-value: 2.83e-08) while we found no statistically significant correlation between population size and life expectancy in the year 2000 (p-value: 0.616).**





**---------------------------------------**

**THIS SECTION ADDED BY NICOLE LUISI**

**---------------------------------------**

#Create some plots

```{r}
#| warning: false
# Install and load new packages
#install.packages(c("plotly", "broom"))
library(plotly)
library(broom)
```

```{r}
# Create subset for 4 specific regions
africadata_limitregion <- africadata %>%
      filter(region %in% c("Northern Africa", "Southern Africa", "Western Africa", "Middle Africa"))

# Set color palette
manualcolors<-c('coral', 'forestgreen', 'darkorange1', 'firebrick4', 'cornflowerblue', 'darkseagreen', 'cyan3', 
                'brown1', 'blueviolet')

# Generate figure
fig <- plot_ly(data=africadata_limitregion, x = ~year, y = ~life_expectancy, text = ~region, type = 'scatter', mode = 'markers', color = ~region, colors=manualcolors)
fig <- fig %>% layout(title = 'Life Expectancy (years) by Year in 4 Regions of Africa',
         yaxis = list(title = "Life Expectancy (yrs)"),
         xaxis = list(title = "Year"))

# View figure, hover for data points
fig
```

```{r}
#library(ggplot2)

# Generate figure
theme_set(
  theme_bw() + 
    theme(legend.position = "top"))
ggplot(africadata, aes(x = gdp, y = infant_mortality)) + 
  geom_point(aes(color = region, size = fertility), alpha = 0.5) +
  scale_color_manual(values = c("#d1495b", "#edae49", "#66a182", "#2e4057", "79b7c5")) +
  scale_size(range = c(0.5, 6))  +
  xlab("GDP") +
  ylab("Infant Mortality (yrs)") +
  ggtitle("Infant Mortality by GDP, with Region as Color and Size as Fertility")

```

#Fit a model

```{r}
# Model for life_expectancy ~ fertility for 4 regions in Africa
newmodel <- lm(life_expectancy ~ fertility, data = africadata_limitregion)
# Summary for new model
summary(newmodel)

# Use broom to make table for new model
tidy(newmodel)

# Create function to summarize results another way
customoutput <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) + 
  geom_point() +
  xlab("Fertility") +
  ylab("Life Expectancy (yrs)") +
  ggtitle("Life Expectancy and Fertility in 4 Regions of Africa") + 
  stat_smooth(method = "lm", col = "red") +
  labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
                     "Intercept =",signif(fit$coef[[1]],5 ),
                     " Slope =",signif(fit$coef[[2]], 5),
                     " P =",signif(summary(fit)$coef[2,4], 5)))
}
customoutput(newmodel)
```


